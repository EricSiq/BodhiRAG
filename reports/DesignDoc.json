{
  "project_name": "The Artemis Knowledge Accelerator",
  "challenge_focus": "Build a Space Biology Knowledge Engine (NASA Space Apps Challenge 2025)",
  "target_audience": ["Scientists (Hypotheses)", "Managers (Investment/Gaps)", "Mission Architects (Risk)"],
  "data_scope": {
    "primary_data_source": "607+ NASA Bioscience Publications (PMC URLs)",
    "secondary_data_sources": ["NASA OSDR Data (for linkage)", "NASA Task Book (for funding metadata)"]
  },
  "core_architecture": "Agentic Hybrid RAG (Retrieval-Augmented Generation)",
  
  "architecture_components": [
    {
      "component": "1. Data Structuring & Ingestion",
      "function": "Transform unstructured PDFs into a structured, semantic format.",
      "workflow_steps": ["CSV Extraction", "Docling/Unstructured Parsing", "Max-Normalized Chunking"],
      "python_libraries": ["pandas", "docling", "spacy", "langchain-core"]
    },
    {
      "component": "2. Knowledge Graph (KG) Creation",
      "function": "Store relationships and logical facts for multi-hop reasoning.",
      "workflow_steps": ["LLM-driven NER/RE (BioBERT/LLaMA)", "Pydantic Schema Validation", "KG Population"],
      "python_libraries": ["transformers (for LLM)", "pydantic", "networkx (analysis)", "neo4j (driver/database)"]
    },
    {
      "component": "3. Vector Database (VS) Creation",
      "function": "Store semantic embeddings of text chunks for descriptive similarity search.",
      "workflow_steps": ["Embedding Generation (e.g., all-MiniLM)", "VS Indexing", "Linking vectors to KG node IDs"],
      "python_libraries": ["sentence-transformers", "chroma/milvus (database)"]
    },
    {
      "component": "4. Agentic Reasoning Core",
      "function": "Dynamically route user queries to the best knowledge source.",
      "workflow_steps": ["Query Intent Analysis", "Dynamic Routing (LangGraph)", "LLM Synthesis (Finetuned LLaMA)"],
      "python_libraries": ["langgraph", "transformers (LLM orchestration)", "langchain"]
    }
  ],
  
  "key_features_and_xai": [
    {
      "feature": "Hybrid RAG Chatbot",
      "purpose": "Answers complex queries by combining factual triples (KG) and contextual text (VS).",
      "xai_aspect": "Source Traceability (URL links) and Retrieval Path Log (KG or VS used)."
    },
    {
      "feature": "Interactive Knowledge Map",
      "purpose": "Visualizes relationships; filters by entity type, environment, or process.",
      "python_libraries": ["pyvis", "plotly-dash (integration)"],
      "xai_aspect": "Node Size based on Centrality; Node Color based on Entity Type."
    },
    {
      "feature": "Gaps & Investment Analysis",
      "purpose": "Identifies over/under-researched areas.",
      "python_libraries": ["bertopic", "networkx (scoring)"],
      "xai_aspect": "Augmented Scoring (Centrality + Topic Relevance) to quantify research impact and gaps."
    }
  ],
  
  "deployment_stack": {
    "backend_framework": "Python/Flask or Python/FastAPI",
    "dashboard_framework": "Plotly Dash / Streamlit",
    "ui_libraries": "Vis.js / Plotly.js (for rendering graph and UMAP plots)",
    "compute_requirement": "High-VRAM GPU (for LLM NER/RE) and multi-core CPU (for parallel ingestion)"
  }
}
